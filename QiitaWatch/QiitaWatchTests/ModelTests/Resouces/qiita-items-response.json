[
  {
    "rendered_body": "<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:305\">SwiftUIで以下のようなX(Twitter)とかでよくある一定の文字数を超えると末尾に「... さらに表示する」と表示され一部文字が省略されるUIを実装してみようと思ったのですが、これが結構難しかったので実装方法を記事にしました。</p>\n<p data-sourcepos=\"4:1-5:122\">省略時のUI<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F800f01de-5a2d-3ed4-9ed1-05bbe1219597.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de1b51d88ff345c0ade5916bf300d071\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F800f01de-5a2d-3ed4-9ed1-05bbe1219597.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de1b51d88ff345c0ade5916bf300d071\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F800f01de-5a2d-3ed4-9ed1-05bbe1219597.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=113a98087a3de5b333d82ad4535c6553 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/800f01de-5a2d-3ed4-9ed1-05bbe1219597.png\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"7:1-8:122\">さらに表示押下後のUI<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2Fe034724d-4027-48b0-7012-13a127e0c666.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9a24f81daf354a835d57c88a5721e55f\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2Fe034724d-4027-48b0-7012-13a127e0c666.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9a24f81daf354a835d57c88a5721e55f\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2Fe034724d-4027-48b0-7012-13a127e0c666.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5a3e1d6a138fb4f0b539bfca78fa3ae4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/e034724d-4027-48b0-7012-13a127e0c666.png\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"10:1-10:14\">\n<span id=\"実装方法\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>実装方法</h1>\n<p data-sourcepos=\"11:1-11:248\">今回実装した方法としては、flowlayout(※)を作成して、文字を一文字のTextに分解してレイアウトしていき、最大文字数に達したら「... さらに表示」のボタンを配置するというものです。</p>\n<p data-sourcepos=\"13:1-13:19\">※flowlayoutとは</p>\n<blockquote data-sourcepos=\"14:1-14:170\">\n<p data-sourcepos=\"14:2-14:170\">FlowLayout は、左上から右下に向けて、部品を流し込むようにレイアウトします。HTML で文字や画像を流し込むのに似ています。</p>\n</blockquote>\n<p data-sourcepos=\"16:1-16:42\"><iframe id=\"qiita-embed-content__36e32eef29eac775306bd3f46588fc66\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__36e32eef29eac775306bd3f46588fc66\" data-content=\"https%3A%2F%2Fwww.tohoho-web.com%2Fjava%2Flayout.htm\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h1 data-sourcepos=\"18:1-18:14\">\n<span id=\"実装内容\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85%E5%86%85%E5%AE%B9\"><i class=\"fa fa-link\"></i></a>実装内容</h1>\n<h3 data-sourcepos=\"20:1-20:26\">\n<span id=\"1-flowlayoutの実装\" class=\"fragment\"></span><a href=\"#1-flowlayout%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>1. flowlayoutの実装</h3>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"21:1-176:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">struct</span> <span class=\"kt\">FlowLayout</span><span class=\"p\">:</span> <span class=\"kt\">Layout</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">var</span> <span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"kt\">Alignment</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">center</span>\n    <span class=\"k\">var</span> <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">sizeThatFits</span><span class=\"p\">(</span><span class=\"nv\">proposal</span><span class=\"p\">:</span> <span class=\"kt\">ProposedViewSize</span><span class=\"p\">,</span> <span class=\"nv\">subviews</span><span class=\"p\">:</span> <span class=\"kt\">Subviews</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">CGSize</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">let</span> <span class=\"nv\">result</span> <span class=\"o\">=</span> <span class=\"kt\">FlowResult</span><span class=\"p\">(</span>\n            <span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">proposal</span><span class=\"o\">.</span><span class=\"nf\">replacingUnspecifiedDimensions</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span>\n            <span class=\"nv\">subviews</span><span class=\"p\">:</span> <span class=\"n\">subviews</span><span class=\"p\">,</span>\n            <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"n\">spacing</span>\n        <span class=\"p\">)</span>\n        \n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">bounds</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">placeSubviews</span><span class=\"p\">(</span><span class=\"k\">in</span> <span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">,</span> <span class=\"nv\">proposal</span><span class=\"p\">:</span> <span class=\"kt\">ProposedViewSize</span><span class=\"p\">,</span> <span class=\"nv\">subviews</span><span class=\"p\">:</span> <span class=\"kt\">Subviews</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">let</span> <span class=\"nv\">result</span> <span class=\"o\">=</span> <span class=\"kt\">FlowResult</span><span class=\"p\">(</span>\n            <span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">proposal</span><span class=\"o\">.</span><span class=\"nf\">replacingUnspecifiedDimensions</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span>\n            <span class=\"nv\">subviews</span><span class=\"p\">:</span> <span class=\"n\">subviews</span><span class=\"p\">,</span>\n            <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"n\">spacing</span>\n        <span class=\"p\">)</span>\n        \n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"k\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">rows</span> <span class=\"p\">{</span>\n            \n            <span class=\"k\">let</span> <span class=\"nv\">rowXOffset</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"o\">.</span><span class=\"n\">percent</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"k\">in</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">range</span> <span class=\"p\">{</span>\n                \n                <span class=\"k\">let</span> <span class=\"nv\">xPos</span> <span class=\"o\">=</span> <span class=\"n\">rowXOffset</span> <span class=\"o\">+</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">minX</span> <span class=\"o\">+</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">xOffsets</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"o\">.</span><span class=\"n\">lowerBound</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">minX</span>\n                <span class=\"k\">let</span> <span class=\"nv\">rowYAlignment</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"n\">subviews</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">sizeThatFits</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">unspecified</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span> <span class=\"o\">*</span>\n                <span class=\"n\">alignment</span><span class=\"o\">.</span><span class=\"n\">vertical</span><span class=\"o\">.</span><span class=\"n\">percent</span>\n                <span class=\"k\">let</span> <span class=\"nv\">yPos</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">minY</span> <span class=\"o\">+</span> <span class=\"n\">rowYAlignment</span> <span class=\"o\">+</span> <span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">minY</span>\n                <span class=\"n\">subviews</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">place</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"kt\">CGPoint</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"n\">xPos</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"n\">yPos</span><span class=\"p\">),</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">topLeading</span><span class=\"p\">,</span> <span class=\"nv\">proposal</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">unspecified</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">struct</span> <span class=\"kt\">FlowResult</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">var</span> <span class=\"nv\">bounds</span> <span class=\"o\">=</span> <span class=\"kt\">CGSize</span><span class=\"o\">.</span><span class=\"n\">zero</span>\n        <span class=\"k\">var</span> <span class=\"nv\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">Row</span><span class=\"p\">]()</span>\n        \n        <span class=\"kd\">struct</span> <span class=\"kt\">Row</span> <span class=\"p\">{</span>\n            \n            <span class=\"k\">var</span> <span class=\"nv\">range</span><span class=\"p\">:</span> <span class=\"kt\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span>\n            <span class=\"k\">var</span> <span class=\"nv\">xOffsets</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Double</span><span class=\"p\">]</span>\n            <span class=\"k\">var</span> <span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"k\">in</span> <span class=\"nv\">maxPossibleWidth</span><span class=\"p\">:</span> <span class=\"kt\">Double</span><span class=\"p\">,</span> <span class=\"nv\">subviews</span><span class=\"p\">:</span> <span class=\"kt\">Subviews</span><span class=\"p\">,</span> <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n            \n            <span class=\"k\">var</span> <span class=\"nv\">itemsInRow</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">var</span> <span class=\"nv\">remainingWidth</span> <span class=\"o\">=</span> <span class=\"n\">maxPossibleWidth</span><span class=\"o\">.</span><span class=\"n\">isFinite</span> <span class=\"p\">?</span> <span class=\"nv\">maxPossibleWidth</span> <span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">greatestFiniteMagnitude</span>\n            <span class=\"k\">var</span> <span class=\"nv\">rowMinY</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n            <span class=\"k\">var</span> <span class=\"nv\">rowHeight</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n            <span class=\"k\">var</span> <span class=\"nv\">xOffsets</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Double</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">subview</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">subviews</span><span class=\"o\">.</span><span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"n\">subviews</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                \n                <span class=\"k\">let</span> <span class=\"nv\">idealSize</span> <span class=\"o\">=</span> <span class=\"n\">subview</span><span class=\"o\">.</span><span class=\"nf\">sizeThatFits</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">unspecified</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nf\">widthInRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nv\">idealWidth</span><span class=\"p\">:</span> <span class=\"n\">idealSize</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">remainingWidth</span> <span class=\"p\">{</span>\n                    \n                    <span class=\"c1\">// Finish the current row without this subview.</span>\n                    <span class=\"nf\">finalizeRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n                <span class=\"nf\">addToRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nv\">idealSize</span><span class=\"p\">:</span> <span class=\"n\">idealSize</span><span class=\"p\">)</span>\n                \n                <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">==</span> <span class=\"n\">subviews</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n                    \n                    <span class=\"c1\">// Finish this row; it's either full or we're on the last view anyway.</span>\n                    <span class=\"nf\">finalizeRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            \n            <span class=\"kd\">func</span> <span class=\"nf\">spacingBefore</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Double</span> <span class=\"p\">{</span>\n                \n                <span class=\"k\">guard</span> <span class=\"n\">itemsInRow</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"p\">}</span>\n                <span class=\"k\">return</span> <span class=\"n\">spacing</span> <span class=\"p\">??</span> <span class=\"n\">subviews</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">spacing</span><span class=\"o\">.</span><span class=\"nf\">distance</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"n\">subviews</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">spacing</span><span class=\"p\">,</span> <span class=\"nv\">along</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n            \n            <span class=\"kd\">func</span> <span class=\"nf\">widthInRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">idealWidth</span><span class=\"p\">:</span> <span class=\"kt\">Double</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Double</span> <span class=\"p\">{</span>\n                \n                <span class=\"n\">idealWidth</span> <span class=\"o\">+</span> <span class=\"nf\">spacingBefore</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n            \n            <span class=\"kd\">func</span> <span class=\"nf\">addToRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">idealSize</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                \n                <span class=\"k\">let</span> <span class=\"nv\">width</span> <span class=\"o\">=</span> <span class=\"nf\">widthInRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nv\">idealWidth</span><span class=\"p\">:</span> <span class=\"n\">idealSize</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span>\n                \n                <span class=\"n\">xOffsets</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">maxPossibleWidth</span> <span class=\"o\">-</span> <span class=\"n\">remainingWidth</span> <span class=\"o\">+</span> <span class=\"nf\">spacingBefore</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">))</span>\n                <span class=\"c1\">// Allocate width to this item (and spacing).</span>\n                <span class=\"n\">remainingWidth</span> <span class=\"o\">-=</span> <span class=\"n\">width</span>\n                <span class=\"c1\">// Ensure the row height is as tall as the tallest item.</span>\n                <span class=\"n\">rowHeight</span> <span class=\"o\">=</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">rowHeight</span><span class=\"p\">,</span> <span class=\"n\">idealSize</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n                <span class=\"c1\">// Can fit in this row, add it.</span>\n                <span class=\"n\">itemsInRow</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"p\">}</span>\n            \n            <span class=\"kd\">func</span> <span class=\"nf\">finalizeRow</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                \n                <span class=\"k\">let</span> <span class=\"nv\">rowWidth</span> <span class=\"o\">=</span> <span class=\"n\">maxPossibleWidth</span> <span class=\"o\">-</span> <span class=\"n\">remainingWidth</span>\n                <span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span>\n                    <span class=\"kt\">Row</span><span class=\"p\">(</span><span class=\"nv\">range</span><span class=\"p\">:</span> <span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">itemsInRow</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">..&lt;</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"nv\">xOffsets</span><span class=\"p\">:</span> <span class=\"n\">xOffsets</span><span class=\"p\">,</span>\n                        <span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"n\">rowMinY</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">rowWidth</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">rowHeight</span><span class=\"p\">))</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">rowWidth</span><span class=\"p\">)</span>\n                <span class=\"k\">let</span> <span class=\"nv\">ySpacing</span> <span class=\"o\">=</span> <span class=\"n\">spacing</span> <span class=\"p\">??</span> <span class=\"kt\">ViewSpacing</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">distance</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"kt\">ViewSpacing</span><span class=\"p\">(),</span> <span class=\"nv\">along</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">vertical</span><span class=\"p\">)</span>\n                <span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">+=</span> <span class=\"n\">rowHeight</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"p\">?</span> <span class=\"nv\">ySpacing</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">rowMinY</span> <span class=\"o\">+=</span> <span class=\"n\">rowHeight</span> <span class=\"o\">+</span> <span class=\"n\">ySpacing</span>\n                <span class=\"n\">itemsInRow</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">rowHeight</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">xOffsets</span><span class=\"o\">.</span><span class=\"nf\">removeAll</span><span class=\"p\">()</span>\n                <span class=\"n\">remainingWidth</span> <span class=\"o\">=</span> <span class=\"n\">maxPossibleWidth</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">extension</span> <span class=\"kt\">HorizontalAlignment</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">var</span> <span class=\"nv\">percent</span><span class=\"p\">:</span> <span class=\"kt\">Double</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">switch</span> <span class=\"k\">self</span> <span class=\"p\">{</span>\n            \n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">leading</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n            \n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">trailing</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span>\n            \n        <span class=\"k\">default</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mf\">0.5</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">extension</span> <span class=\"kt\">VerticalAlignment</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">var</span> <span class=\"nv\">percent</span><span class=\"p\">:</span> <span class=\"kt\">Double</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">switch</span> <span class=\"k\">self</span> <span class=\"p\">{</span>\n            \n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">top</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n            \n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">bottom</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span>\n            \n        <span class=\"k\">default</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mf\">0.5</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"178:1-178:83\">こちらはAppleのサンプルアプリの実装を参考にしたものです。</p>\n<p data-sourcepos=\"180:1-180:98\"><iframe id=\"qiita-embed-content__8ba392a02e27ba484fd4ad0fefe04f58\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__8ba392a02e27ba484fd4ad0fefe04f58\" data-content=\"https%3A%2F%2Fdeveloper.apple.com%2Fdocumentation%2Fswiftui%2Ffood_truck_building_a_swiftui_multiplatform_app%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"182:1-182:194\">この実装の詳細な説明に入ると、主題から逸れそうなのでここでは詳細な説明は省略します！(カスタムLayoutについては別記事として作りたい！)</p>\n<p data-sourcepos=\"184:1-184:145\">とりあえず上記実装で、以下のようなflowlayoutが組めるようになったと思っていただければ良いと思います。</p>\n<p data-sourcepos=\"186:1-186:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F942e3431-51fa-b600-03ca-7617553a8535.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cc9bcffe71579b4f32c00d097a2ef963\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F942e3431-51fa-b600-03ca-7617553a8535.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cc9bcffe71579b4f32c00d097a2ef963\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F942e3431-51fa-b600-03ca-7617553a8535.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=90d5a925d9c98ded597a200ac88c082a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/942e3431-51fa-b600-03ca-7617553a8535.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"189:1-200:3\"><div class=\"highlight\"><pre><code><span class=\"cp\">#Preview {</span>\n    <span class=\"kt\">FlowLayout</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ForEach</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"nf\">random</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">},</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">num</span> <span class=\"k\">in</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">))</span>\n                <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">))</span>\n                <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"p\">(</span><span class=\"nv\">red</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"nv\">green</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"nv\">blue</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.3</span><span class=\"p\">)))</span>\n                <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">RoundedRectangle</span><span class=\"p\">(</span><span class=\"nv\">cornerRadius</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"202:1-202:59\">\n<span id=\"文字を分解してflowlayoutに詰めていく実装\" class=\"fragment\"></span><a href=\"#%E6%96%87%E5%AD%97%E3%82%92%E5%88%86%E8%A7%A3%E3%81%97%E3%81%A6flowlayout%E3%81%AB%E8%A9%B0%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>文字を分解してflowlayoutに詰めていく実装</h3>\n<p data-sourcepos=\"203:1-203:48\">まずは実装を全て載せておきます。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"205:1-305:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">struct</span> <span class=\"kt\">OmittableMessageView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    \n    <span class=\"c1\">// MARK: - private property</span>\n    \n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">isShowing</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span>\n    \n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">fontSize</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    \n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">threePointLeader</span> <span class=\"o\">=</span> <span class=\"s\">\"...\"</span>\n    \n    <span class=\"c1\">// MARK: - initialize method</span>\n    \n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span>\n         <span class=\"nv\">fontSize</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span> <span class=\"o\">=</span> <span class=\"mi\">14</span><span class=\"p\">,</span>\n         <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">let</span> <span class=\"nv\">isShowing</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">maxLength</span>\n        \n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        \n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">fontSize</span> <span class=\"o\">=</span> <span class=\"n\">fontSize</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">maxLength</span> <span class=\"o\">=</span> <span class=\"n\">maxLength</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isShowing</span> <span class=\"o\">=</span> <span class=\"n\">isShowing</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// MARK: - view build definition</span>\n    \n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"n\">isShowing</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">fontSize</span><span class=\"p\">))</span>\n                <span class=\"o\">.</span><span class=\"nf\">multilineTextAlignment</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">,</span> <span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"nf\">getSeparateMessageByNewLine</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"nf\">getMaxLengthText</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"n\">maxLength</span><span class=\"p\">)),</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">lineText</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">FlowLayout</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">,</span> <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"k\">let</span> <span class=\"nv\">separateChars</span> <span class=\"o\">=</span> <span class=\"nf\">getSeparateChar</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">lineText</span><span class=\"p\">)</span>\n                        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">separateChars</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span>\n                                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">fontSize</span><span class=\"p\">))</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">lastString</span> <span class=\"o\">=</span> <span class=\"n\">separateChars</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">,</span>\n                           <span class=\"n\">lastString</span> <span class=\"o\">==</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span> <span class=\"p\">{</span>\n                            <span class=\"nf\">createShowMoreButton</span><span class=\"p\">()</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">extension</span> <span class=\"kt\">OmittableMessageView</span> <span class=\"p\">{</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">createShowMoreButton</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Button</span> <span class=\"p\">{</span>\n            <span class=\"n\">isShowing</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"nv\">label</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"さらに表示\"</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">fontSize</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">frameButtonStyle</span><span class=\"p\">(</span><span class=\"nv\">backgroundColor</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">,</span>\n                          <span class=\"nv\">frameWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// MARK: - utility</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">extension</span> <span class=\"kt\">OmittableMessageView</span> <span class=\"p\">{</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">getMaxLengthText</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">return</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">prefix</span><span class=\"p\">(</span><span class=\"n\">maxLength</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">joined</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">getSeparateMessageByNewLine</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"nv\">separatedBy</span><span class=\"p\">:</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">getSeparateChar</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">var</span> <span class=\"nv\">arrayText</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"nf\">suffix</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span> <span class=\"p\">{</span>\n            \n            <span class=\"c1\">// 3点リーダーが末尾にある場合は、文字の配列で分割されている</span>\n            <span class=\"c1\">// \".\"を\"...\"に結合させて設定する</span>\n            <span class=\"n\">arrayText</span> <span class=\"o\">=</span> <span class=\"n\">arrayText</span><span class=\"o\">.</span><span class=\"nf\">dropLast</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n            <span class=\"n\">arrayText</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">arrayText</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n<h4 data-sourcepos=\"307:1-307:35\">\n<span id=\"以降が実装の詳細です\" class=\"fragment\"></span><a href=\"#%E4%BB%A5%E9%99%8D%E3%81%8C%E5%AE%9F%E8%A3%85%E3%81%AE%E8%A9%B3%E7%B4%B0%E3%81%A7%E3%81%99\"><i class=\"fa fa-link\"></i></a>以降が実装の詳細です</h4>\n<p data-sourcepos=\"309:1-310:76\">まずテキストを1文字ずつ分解してTextを生成する前に、元テキストの改行を表現するために改行ごとの配列に変換します。<br>\nその配列をForEachで回してVStackで囲み改行を表現します。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"312:1-327:3\"><div class=\"highlight\"><pre><code><span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 改行ごとの文字列でForEachを回す</span>\n            <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"nf\">getSeparateMessageByNewLine</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"nf\">getMaxLengthText</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"n\">maxLength</span><span class=\"p\">)),</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">lineText</span> <span class=\"k\">in</span>\n                <span class=\"o\">...</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n    \n<span class=\"kd\">func</span> <span class=\"nf\">getSeparateMessageByNewLine</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n        \n    <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"nv\">separatedBy</span><span class=\"p\">:</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"329:1-329:127\">また<code>getMaxLengthText</code>では最大文字数を超えた文字を消して末尾に3点リーダーを付与しています。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"331:1-337:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">func</span> <span class=\"nf\">getMaxLengthText</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// 前から最大文字数分取得して、３点リーダーを末尾に付与する</span>\n    <span class=\"k\">return</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">prefix</span><span class=\"p\">(</span><span class=\"n\">maxLength</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">joined</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"339:1-340:90\">ここまでで改行ごとのテキスト取得はできたので、これを一文字ずつに分解してTextとして表示していきます。<br>\nそして省略されている行の末尾にさらに表示ボタンを設定します。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"342:1-373:3\"><div class=\"highlight\"><pre><code><span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"nf\">getSeparateMessageByNewLine</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"nf\">getMaxLengthText</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"n\">maxLength</span><span class=\"p\">)),</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">lineText</span> <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"nv\">separateChars</span> <span class=\"o\">=</span> <span class=\"nf\">getSeparateChar</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">lineText</span><span class=\"p\">)</span>\n            <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">separateChars</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 一文字に分割した文字をTextにする</span>\n                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">fontSize</span><span class=\"p\">))</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">lastString</span> <span class=\"o\">=</span> <span class=\"n\">separateChars</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">,</span>\n               <span class=\"n\">lastString</span> <span class=\"o\">==</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span> <span class=\"p\">{</span>\n                <span class=\"nf\">createShowMoreButton</span><span class=\"p\">()</span> <span class=\"c1\">// 現在の行の最後に\"...\"があればさらに表示ボタンを配置する</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 一文字ずつの配列に変換する</span>\n<span class=\"kd\">func</span> <span class=\"nf\">getSeparateChar</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">var</span> <span class=\"nv\">arrayText</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"nf\">suffix</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span> <span class=\"p\">{</span>\n        \n        <span class=\"c1\">// 3点リーダーが末尾にある場合は、文字の配列で分割されている</span>\n        <span class=\"c1\">// \".\"を\"...\"に結合させて設定する</span>\n        <span class=\"n\">arrayText</span> <span class=\"o\">=</span> <span class=\"n\">arrayText</span><span class=\"o\">.</span><span class=\"nf\">dropLast</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n        <span class=\"n\">arrayText</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">arrayText</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"375:1-375:170\">ここまでで一文字毎のTextを表示することができたので、作成したflowlayoutでTextを囲んでやればさらに表示するのUIが完成です。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"377:1-396:3\"><div class=\"highlight\"><pre><code><span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"nf\">getSeparateMessageByNewLine</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"nf\">getMaxLengthText</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"n\">maxLength</span><span class=\"p\">)),</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">lineText</span> <span class=\"k\">in</span>\n            <span class=\"kt\">FlowLayout</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">,</span> <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 一文字毎のTextをflowlayoutで表示する</span>\n                <span class=\"k\">let</span> <span class=\"nv\">separateChars</span> <span class=\"o\">=</span> <span class=\"nf\">getSeparateChar</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">lineText</span><span class=\"p\">)</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">separateChars</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">fontSize</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">lastString</span> <span class=\"o\">=</span> <span class=\"n\">separateChars</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">,</span>\n                   <span class=\"n\">lastString</span> <span class=\"o\">==</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span> <span class=\"p\">{</span>\n                    <span class=\"nf\">createShowMoreButton</span><span class=\"p\">()</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"398:1-398:104\">最後に<code>isShowing</code>の内容で省略するしないを切り替えるようにすれば完成です。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"400:1-427:3\"><div class=\"highlight\"><pre><code><span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"n\">isShowing</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">fontSize</span><span class=\"p\">))</span>\n                <span class=\"o\">.</span><span class=\"nf\">multilineTextAlignment</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">,</span> <span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"nf\">getSeparateMessageByNewLine</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"nf\">getMaxLengthText</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nv\">maxLength</span><span class=\"p\">:</span> <span class=\"n\">maxLength</span><span class=\"p\">)),</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">lineText</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">FlowLayout</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">,</span> <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"k\">let</span> <span class=\"nv\">separateChars</span> <span class=\"o\">=</span> <span class=\"nf\">getSeparateChar</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"n\">lineText</span><span class=\"p\">)</span>\n                        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">separateChars</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span>\n                                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">fontSize</span><span class=\"p\">))</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">lastString</span> <span class=\"o\">=</span> <span class=\"n\">separateChars</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">,</span>\n                           <span class=\"n\">lastString</span> <span class=\"o\">==</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">threePointLeader</span> <span class=\"p\">{</span>\n                            <span class=\"nf\">createShowMoreButton</span><span class=\"p\">()</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"429:1-429:62\">以上で、さらに表示するのUIが完成しました。</p>\n<p data-sourcepos=\"431:1-431:122\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F6c7498a7-f0de-ac38-9522-b321ad905a70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0a2de7c391c8a501240c44ce2dd15e7\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F6c7498a7-f0de-ac38-9522-b321ad905a70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0a2de7c391c8a501240c44ce2dd15e7\" alt=\"image.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3359094%2F6c7498a7-f0de-ac38-9522-b321ad905a70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1a2a974a8f819d409eca42e0fcb91345 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/6c7498a7-f0de-ac38-9522-b321ad905a70.png\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"433:1-445:3\"><div class=\"highlight\"><pre><code><span class=\"cp\">#Preview {</span>\n    <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">)</span>\n        <span class=\"kt\">OmittableMessageView</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"s\">\"lsjfljslfjsiejflsjelfiasjfsfsd\"</span>\n                    <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n                    <span class=\"o\">+</span> <span class=\"s\">\"fsfsfsfsefsefasefasefasefsfsfefasefasefaselsaleifjlsesjeflesjlsijfseljfsifjelsjilsjfjelsijfselfijsliefjlsejjl\"</span>\n                    <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n                    <span class=\"o\">+</span> <span class=\"s\">\"jslejfiljsefljaslejfilsjefjlasjefljsleifjlsjflaisjfleijsaeljflsiejflisjelfiajslefjlasjeflsiejflsajeflijselfjilasejfliajseljflisejflasjlefjlsejfi\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">,</span> <span class=\"nv\">maxHeight</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">infinity</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"447:1-447:11\">\n<span id=\"おわり\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>おわり</h1>\n<p data-sourcepos=\"448:1-449:171\">振り返ってみると結構ごちゃごちゃした実装になってしまいました。<br>\nもっとスマートに実装できるのではという思いもあるので、もし他にいい方法ご存知の方はコメントいただけますと幸いです。</p>\n",
    "body": "# はじめに\nSwiftUIで以下のようなX(Twitter)とかでよくある一定の文字数を超えると末尾に「... さらに表示する」と表示され一部文字が省略されるUIを実装してみようと思ったのですが、これが結構難しかったので実装方法を記事にしました。\n\n省略時のUI\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/800f01de-5a2d-3ed4-9ed1-05bbe1219597.png)\n\nさらに表示押下後のUI\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/e034724d-4027-48b0-7012-13a127e0c666.png)\n\n# 実装方法\n今回実装した方法としては、flowlayout(※)を作成して、文字を一文字のTextに分解してレイアウトしていき、最大文字数に達したら「... さらに表示」のボタンを配置するというものです。\n\n※flowlayoutとは\n>FlowLayout は、左上から右下に向けて、部品を流し込むようにレイアウトします。HTML で文字や画像を流し込むのに似ています。\n\nhttps://www.tohoho-web.com/java/layout.htm\n\n# 実装内容\n\n### 1. flowlayoutの実装\n```swift\nstruct FlowLayout: Layout {\n    \n    var alignment: Alignment = .center\n    var spacing: CGFloat?\n    \n    func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache _: inout Void) -> CGSize {\n        \n        let result = FlowResult(\n            in: proposal.replacingUnspecifiedDimensions().width,\n            subviews: subviews,\n            spacing: spacing\n        )\n        \n        return result.bounds\n    }\n    \n    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache _: inout Void) {\n        \n        let result = FlowResult(\n            in: proposal.replacingUnspecifiedDimensions().width,\n            subviews: subviews,\n            spacing: spacing\n        )\n        \n        for row in result.rows {\n            \n            let rowXOffset = (bounds.width - row.frame.width) * alignment.horizontal.percent\n            for index in row.range {\n                \n                let xPos = rowXOffset + row.frame.minX + row.xOffsets[index - row.range.lowerBound] + bounds.minX\n                let rowYAlignment = (row.frame.height - subviews[index].sizeThatFits(.unspecified).height) *\n                alignment.vertical.percent\n                let yPos = row.frame.minY + rowYAlignment + bounds.minY\n                subviews[index].place(at: CGPoint(x: xPos, y: yPos), anchor: .topLeading, proposal: .unspecified)\n            }\n        }\n    }\n    \n    struct FlowResult {\n        \n        var bounds = CGSize.zero\n        var rows = [Row]()\n        \n        struct Row {\n            \n            var range: Range<Int>\n            var xOffsets: [Double]\n            var frame: CGRect\n        }\n        \n        init(in maxPossibleWidth: Double, subviews: Subviews, spacing: CGFloat?) {\n            \n            var itemsInRow = 0\n            var remainingWidth = maxPossibleWidth.isFinite ? maxPossibleWidth : .greatestFiniteMagnitude\n            var rowMinY = 0.0\n            var rowHeight = 0.0\n            var xOffsets: [Double] = []\n            for (index, subview) in zip(subviews.indices, subviews) {\n                \n                let idealSize = subview.sizeThatFits(.unspecified)\n                if index != 0 && widthInRow(index: index, idealWidth: idealSize.width) > remainingWidth {\n                    \n                    // Finish the current row without this subview.\n                    finalizeRow(index: max(index - 1, 0))\n                }\n                addToRow(index: index, idealSize: idealSize)\n                \n                if index == subviews.count - 1 {\n                    \n                    // Finish this row; it's either full or we're on the last view anyway.\n                    finalizeRow(index: index)\n                }\n            }\n            \n            func spacingBefore(index: Int) -> Double {\n                \n                guard itemsInRow > 0 else { return 0 }\n                return spacing ?? subviews[index - 1].spacing.distance(to: subviews[index].spacing, along: .horizontal)\n            }\n            \n            func widthInRow(index: Int, idealWidth: Double) -> Double {\n                \n                idealWidth + spacingBefore(index: index)\n            }\n            \n            func addToRow(index: Int, idealSize: CGSize) {\n                \n                let width = widthInRow(index: index, idealWidth: idealSize.width)\n                \n                xOffsets.append(maxPossibleWidth - remainingWidth + spacingBefore(index: index))\n                // Allocate width to this item (and spacing).\n                remainingWidth -= width\n                // Ensure the row height is as tall as the tallest item.\n                rowHeight = max(rowHeight, idealSize.height)\n                // Can fit in this row, add it.\n                itemsInRow += 1\n            }\n            \n            func finalizeRow(index: Int) {\n                \n                let rowWidth = maxPossibleWidth - remainingWidth\n                rows.append(\n                    Row(range: index - max(itemsInRow - 1, 0) ..< index + 1,\n                        xOffsets: xOffsets,\n                        frame: CGRect(x: 0, y: rowMinY, width: rowWidth, height: rowHeight))\n                )\n                bounds.width = max(bounds.width, rowWidth)\n                let ySpacing = spacing ?? ViewSpacing().distance(to: ViewSpacing(), along: .vertical)\n                bounds.height += rowHeight + (rows.count > 1 ? ySpacing : 0)\n                rowMinY += rowHeight + ySpacing\n                itemsInRow = 0\n                rowHeight = 0\n                xOffsets.removeAll()\n                remainingWidth = maxPossibleWidth\n            }\n        }\n    }\n}\n\nprivate extension HorizontalAlignment {\n    \n    var percent: Double {\n        \n        switch self {\n            \n        case .leading:\n            return 0\n            \n        case .trailing:\n            return 1\n            \n        default:\n            return 0.5\n        }\n    }\n}\n\nprivate extension VerticalAlignment {\n    \n    var percent: Double {\n        \n        switch self {\n            \n        case .top:\n            return 0\n            \n        case .bottom:\n            return 1\n            \n        default:\n            return 0.5\n        }\n    }\n}\n```\n\nこちらはAppleのサンプルアプリの実装を参考にしたものです。\n\nhttps://developer.apple.com/documentation/swiftui/food_truck_building_a_swiftui_multiplatform_app/\n\nこの実装の詳細な説明に入ると、主題から逸れそうなのでここでは詳細な説明は省略します！(カスタムLayoutについては別記事として作りたい！)\n\nとりあえず上記実装で、以下のようなflowlayoutが組めるようになったと思っていただければ良いと思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/942e3431-51fa-b600-03ca-7617553a8535.png)\n\n\n```swift\n#Preview {\n    FlowLayout {\n        ForEach((1...10).map { _ in Int.random(in: 1...10) }, id: \\.self) { num in\n            Text(String(num))\n                .frame(width: 30 * CGFloat(num))\n                .background(Color(Color(red: CGFloat(num) * 0.1, green: CGFloat(num) * 0.02, blue: CGFloat(num) * 0.3)))\n                .clipShape(RoundedRectangle(cornerRadius: 10))\n        }\n    }\n}\n```\n\n### 文字を分解してflowlayoutに詰めていく実装\nまずは実装を全て載せておきます。\n\n```swift\nstruct OmittableMessageView: View {\n    \n    // MARK: - private property\n    \n    @State private var isShowing: Bool\n    \n    private let text: String\n    private let fontSize: CGFloat\n    private let maxLength: Int\n    \n    private static let threePointLeader = \"...\"\n    \n    // MARK: - initialize method\n    \n    init(text: String,\n         fontSize: CGFloat = 14,\n         maxLength: Int = 200) {\n        \n        let isShowing = text.count <= maxLength\n        \n        self.text = text\n        \n        self.fontSize = fontSize\n        self.maxLength = maxLength\n        self.isShowing = isShowing\n    }\n    \n    // MARK: - view build definition\n    \n    var body: some View {\n        if isShowing {\n            Text(text)\n                .font(.system(size: fontSize))\n                .multilineTextAlignment(.leading)\n                .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        else {\n            VStack(alignment: .leading) {\n                ForEach(getSeparateMessageByNewLine(text: getMaxLengthText(text: text, maxLength: maxLength)), id: \\.self) { lineText in\n                    FlowLayout(alignment: .leading, spacing: .zero) {\n                        let separateChars = getSeparateChar(text: lineText)\n                        ForEach(separateChars, id: \\.self) {\n                            Text($0)\n                                .font(.system(size: fontSize))\n                        }\n                        if let lastString = separateChars.last,\n                           lastString == Self.threePointLeader {\n                            createShowMoreButton()\n                        }\n                    }\n                }\n            }\n            .frame(maxWidth: .infinity)\n        }\n    }\n}\n\nprivate extension OmittableMessageView {\n    \n    func createShowMoreButton() -> some View {\n        Button {\n            isShowing.toggle()\n        } label: {\n            Text(\"さらに表示\")\n                .font(.system(size: fontSize))\n        }\n        .frameButtonStyle(backgroundColor: .clear,\n                          frameWidth: .zero)\n    }\n}\n\n// MARK: - utility\n\nprivate extension OmittableMessageView {\n    \n    func getMaxLengthText(text: String, maxLength: Int) -> String {\n        \n        return Array(text).prefix(maxLength).map { String($0) }.joined() + Self.threePointLeader\n    }\n    \n    func getSeparateMessageByNewLine(text: String) -> [String] {\n        \n        return text.components(separatedBy: \"\\n\")\n    }\n    \n    func getSeparateChar(text: String) -> [String] {\n        \n        var arrayText = Array(text).map { String($0) }\n        if text.suffix(Self.threePointLeader.count) == Self.threePointLeader {\n            \n            // 3点リーダーが末尾にある場合は、文字の配列で分割されている\n            // \".\"を\"...\"に結合させて設定する\n            arrayText = arrayText.dropLast(Self.threePointLeader.count)\n            arrayText.append(Self.threePointLeader)\n        }\n        return arrayText\n    }\n}\n\n```\n\n#### 以降が実装の詳細です\n\nまずテキストを1文字ずつ分解してTextを生成する前に、元テキストの改行を表現するために改行ごとの配列に変換します。\nその配列をForEachで回してVStackで囲み改行を表現します。\n\n```swift\nvar body: some View {\n        VStack(alignment: .leading) {\n            // 改行ごとの文字列でForEachを回す\n            ForEach(getSeparateMessageByNewLine(text: getMaxLengthText(text: text, maxLength: maxLength)), id: \\.self) { lineText in\n                ...\n            }\n        }\n        .frame(maxWidth: .infinity)\n}\n    \nfunc getSeparateMessageByNewLine(text: String) -> [String] {\n        \n    return text.components(separatedBy: \"\\n\")\n}\n```\n\nまた`getMaxLengthText`では最大文字数を超えた文字を消して末尾に3点リーダーを付与しています。\n\n```swift\nfunc getMaxLengthText(text: String, maxLength: Int) -> String {\n\n    // 前から最大文字数分取得して、３点リーダーを末尾に付与する\n    return Array(text).prefix(maxLength).map { String($0) }.joined() + Self.threePointLeader\n}\n```\n\nここまでで改行ごとのテキスト取得はできたので、これを一文字ずつに分解してTextとして表示していきます。\nそして省略されている行の末尾にさらに表示ボタンを設定します。\n\n```swift\nvar body: some View {\n    VStack(alignment: .leading) {\n        ForEach(getSeparateMessageByNewLine(text: getMaxLengthText(text: text, maxLength: maxLength)), id: \\.self) { lineText in\n            let separateChars = getSeparateChar(text: lineText)\n            ForEach(separateChars, id: \\.self) { // 一文字に分割した文字をTextにする\n                Text($0)\n                    .font(.system(size: fontSize))\n            }\n            if let lastString = separateChars.last,\n               lastString == Self.threePointLeader {\n                createShowMoreButton() // 現在の行の最後に\"...\"があればさらに表示ボタンを配置する\n            }\n        }\n    }\n    .frame(maxWidth: .infinity)\n}\n\n// 一文字ずつの配列に変換する\nfunc getSeparateChar(text: String) -> [String] {\n    \n    var arrayText = Array(text).map { String($0) }\n    if text.suffix(Self.threePointLeader.count) == Self.threePointLeader {\n        \n        // 3点リーダーが末尾にある場合は、文字の配列で分割されている\n        // \".\"を\"...\"に結合させて設定する\n        arrayText = arrayText.dropLast(Self.threePointLeader.count)\n        arrayText.append(Self.threePointLeader)\n    }\n    return arrayText\n}\n```\n\nここまでで一文字毎のTextを表示することができたので、作成したflowlayoutでTextを囲んでやればさらに表示するのUIが完成です。\n\n```swift\nvar body: some View {\n    VStack(alignment: .leading) {\n        ForEach(getSeparateMessageByNewLine(text: getMaxLengthText(text: text, maxLength: maxLength)), id: \\.self) { lineText in\n            FlowLayout(alignment: .leading, spacing: .zero) { // 一文字毎のTextをflowlayoutで表示する\n                let separateChars = getSeparateChar(text: lineText)\n                ForEach(separateChars, id: \\.self) {\n                    Text($0)\n                        .font(.system(size: fontSize))\n                }\n                if let lastString = separateChars.last,\n                   lastString == Self.threePointLeader {\n                    createShowMoreButton()\n                }\n            }\n        }\n    }\n    .frame(maxWidth: .infinity)\n}\n```\n\n最後に`isShowing`の内容で省略するしないを切り替えるようにすれば完成です。\n\n```swift\nvar body: some View {\n        if isShowing {\n            Text(text)\n                .font(.system(size: fontSize))\n                .multilineTextAlignment(.leading)\n                .frame(maxWidth: .infinity, alignment: .leading)\n        }\n        else {\n            VStack(alignment: .leading) {\n                ForEach(getSeparateMessageByNewLine(text: getMaxLengthText(text: text, maxLength: maxLength)), id: \\.self) { lineText in\n                    FlowLayout(alignment: .leading, spacing: .zero) {\n                        let separateChars = getSeparateChar(text: lineText)\n                        ForEach(separateChars, id: \\.self) {\n                            Text($0)\n                                .font(.system(size: fontSize))\n                        }\n                        if let lastString = separateChars.last,\n                           lastString == Self.threePointLeader {\n                            createShowMoreButton()\n                        }\n                    }\n                }\n            }\n            .frame(maxWidth: .infinity)\n        }\n    }\n```\n\n以上で、さらに表示するのUIが完成しました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/6c7498a7-f0de-ac38-9522-b321ad905a70.png)\n\n```swift\n#Preview {\n    VStack {\n        Text(\"Hello\")\n        OmittableMessageView(text: \"lsjfljslfjsiejflsjelfiasjfsfsd\"\n                    + \"\\n\"\n                    + \"fsfsfsfsefsefasefasefasefsfsfefasefasefaselsaleifjlsesjeflesjlsijfseljfsifjelsjilsjfjelsijfselfijsliefjlsejjl\"\n                    + \"\\n\"\n                    + \"jslejfiljsefljaslejfilsjefjlasjefljsleifjlsjflaisjfleijsaeljflsiejflisjelfiajslefjlasjeflsiejflsajeflijselfjilasejfliajseljflisejflasjlefjlsejfi\")\n    }\n    .frame(maxWidth: .infinity, maxHeight: .infinity)\n}\n```\n\n# おわり\n振り返ってみると結構ごちゃごちゃした実装になってしまいました。\nもっとスマートに実装できるのではという思いもあるので、もし他にいい方法ご存知の方はコメントいただけますと幸いです。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2024-11-10T11:43:21+09:00",
    "group": null,
    "id": "01e1b20a1417998994ab",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 2,
    "tags": [
      {
        "name": "iOS",
        "versions": [
          
        ]
      },
      {
        "name": "Swift",
        "versions": [
          
        ]
      },
      {
        "name": "SwiftUI",
        "versions": [
          
        ]
      }
    ],
    "title": "SwiftUIでさらに表示するのUIを作る",
    "updated_at": "2024-11-10T11:43:21+09:00",
    "url": "https://qiita.com/stotic-dev/items/01e1b20a1417998994ab",
    "user": {
      "description": "カメ好き！",
      "facebook_id": "",
      "followees_count": 6,
      "followers_count": 0,
      "github_login_name": "stotic-dev",
      "id": "stotic-dev",
      "items_count": 14,
      "linkedin_id": "",
      "location": "千葉",
      "name": "",
      "organization": "",
      "permanent_id": 3359094,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/profile-images/1727252399",
      "team_only": false,
      "twitter_screen_name": "SE57186932",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null,
    "organization_url_name": null,
    "slide": false
  },
  {
    "rendered_body": "<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"2:1-2:227\">swift concurrencyの対応を行なっているとclassを<code>Sendable</code>に適合させる必要がある場面があり以下のように実装してみたのですが、警告が表示されコンパイラに怒られました。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"4:1-9:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"kt\">Counter</span><span class=\"p\">:</span> <span class=\"kt\">Sendable</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"11:1-11:54\">警告の内容としては以下のとおりです。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"12:1-14:3\"><div class=\"highlight\"><pre><code>Non-final class 'Counter' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n</code></pre></div></div>\n<p data-sourcepos=\"16:1-16:138\">今回は上記の警告での対応方法と、なぜこの警告が出たのかを調べたのでその内容を記事にしました。</p>\n<h1 data-sourcepos=\"18:1-18:32\">\n<span id=\"警告の内容と対応方法\" class=\"fragment\"></span><a href=\"#%E8%AD%A6%E5%91%8A%E3%81%AE%E5%86%85%E5%AE%B9%E3%81%A8%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>警告の内容と対応方法</h1>\n<p data-sourcepos=\"19:1-20:68\">これはコンパイラの警告を日本語訳するとfinal出ないclassは<code>Sendable</code>には適合できまへんということなので、素直にclassにfinalをつけるとコンパイラを黙らせることができます。<br>\n(コンパイラは結構ちゃんと教えてくれていました)</p>\n<p data-sourcepos=\"22:1-22:51\">修正後のコードは以下のとおりです。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"23:1-28:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">Counter</span><span class=\"p\">:</span> <span class=\"kt\">Sendable</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"30:1-30:206\">これだけでは流石に味気ない記事で終わってしまうので、冒頭でも述べたとおりなぜfinalなclass出ないと<code>Sendable</code>に適合できないのか以降で考えてみます。</p>\n<h1 data-sourcepos=\"32:1-32:70\">\n<span id=\"なぜclassはfinalでないとsendableに適合できないのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9Cclass%E3%81%AFfinal%E3%81%A7%E3%81%AA%E3%81%84%E3%81%A8sendable%E3%81%AB%E9%81%A9%E5%90%88%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜclassはfinalでないと<code>Sendable</code>に適合できないのか</h1>\n<p data-sourcepos=\"33:1-33:104\">これは<code>Sendable</code>の意味とfinalなclassの意味を理解すれば、理由が見えてきます。</p>\n<h3 data-sourcepos=\"35:1-35:20\">\n<span id=\"sendableとは\" class=\"fragment\"></span><a href=\"#sendable%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a><code>Sendable</code>とは</h3>\n<p data-sourcepos=\"36:1-37:343\">データ競合しない型であることを保証するプロトコルです。<br>\nデータ競合しないということは、型がイミュータブル(不変)であるということです。(複数のスレッドで同時に書き込みを含むアクセスがあったときにデータ競合が起きるため、書き込みが起きない型であれば書き込みができないのでデータ競合も起きない)</p>\n<h3 data-sourcepos=\"39:1-39:23\">\n<span id=\"finalなclassとは\" class=\"fragment\"></span><a href=\"#final%E3%81%AAclass%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>finalなclassとは</h3>\n<p data-sourcepos=\"40:1-40:41\">継承されないclassのことです。</p>\n<p data-sourcepos=\"42:1-43:71\">finalがついていないclassは別クラスで継承できますが、finalがついたclassを継承しようとするとコンパイルエラーになります。<br>\nつまり継承されないことを保証したclassとなります。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"45:1-58:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">Counter</span><span class=\"p\">:</span> <span class=\"kt\">Sendable</span> <span class=\"p\">{</span>\n    \n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">inheritableCounter</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">SampleCounter1</span><span class=\"p\">:</span> <span class=\"n\">inheritableCounter</span> <span class=\"p\">{}</span> <span class=\"c1\">// OK</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">SampleCounter2</span><span class=\"p\">:</span> <span class=\"kt\">Counter</span> <span class=\"p\">{}</span> <span class=\"c1\">// コンパイルエラー</span>\n</code></pre></div></div>\n<p data-sourcepos=\"60:1-60:154\">継承すると、以下<code>SampleCounter1</code>のようにプロパティの拡張が行えたり、継承元の型として振る舞うことができます。</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"62:1-72:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"kt\">InheritableCounter</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">SampleCounter1</span><span class=\"p\">:</span> <span class=\"kt\">InheritableCounter</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">extensionValue</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">counter</span><span class=\"p\">:</span> <span class=\"kt\">InheritableCounter</span> <span class=\"o\">=</span> <span class=\"kt\">SampleCounter1</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p data-sourcepos=\"74:1-74:113\">ここまでくると、なぜfinalなclassでないと<code>Sendable</code>に適合できないか見えてきました。</p>\n<p data-sourcepos=\"76:1-79:152\">finalでないclassは継承によって ミュータブル(可変)な型になることが可能です。<br>\nそして、継承された型は継承元と同じ型として振る舞うことができる性質上、継承元がイミュータブルでも継承された型がミュータブルとなり継承元の型として振る舞うと継承元の型がイミュータブルであることつまり<code>Sendable</code>であることが保証されなくなってしまいます。<br>\nよってclassを<code>Sendable</code>に適合するにはfinalで継承されないことを保証してあげる必要があるわけでした。<br>\n(ちなみに、structは継承することができないので、finalをつけないと<code>Sendable</code>になれないといった制約はありません)</p>\n<div class=\"code-frame\" data-lang=\"swift\" data-sourcepos=\"81:1-91:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"kt\">InheritableCounter</span> <span class=\"p\">{</span> <span class=\"c1\">// 定数しかないので、イミュータブルなクラス</span>\n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">SampleCounter1</span><span class=\"p\">:</span> <span class=\"kt\">InheritableCounter</span> <span class=\"p\">{</span> <span class=\"c1\">// 変数を持ったミュータブルなクラス</span>\n    <span class=\"k\">var</span> <span class=\"nv\">extensionValue</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">counter</span><span class=\"p\">:</span> <span class=\"kt\">InheritableCounter</span> <span class=\"o\">=</span> <span class=\"kt\">SampleCounter1</span><span class=\"p\">()</span> <span class=\"c1\">// ミュータブルなSampleCounter1がInheritableCounterとして振る舞っている</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"93:1-93:11\">\n<span id=\"おわり\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>おわり</h1>\n<p data-sourcepos=\"94:1-94:186\">元々はちょっとした警告の対応でしたが、なぜこれがダメなのかちゃんと考えると理由もちゃんとあって謎解きみたいで楽しかったです。</p>\n",
    "body": "# はじめに\nswift concurrencyの対応を行なっているとclassを`Sendable`に適合させる必要がある場面があり以下のように実装してみたのですが、警告が表示されコンパイラに怒られました。\n\n```swift\nclass Counter: Sendable {\n    \n    let value: Int = 0\n}\n```\n\n警告の内容としては以下のとおりです。\n```\nNon-final class 'Counter' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n```\n\n今回は上記の警告での対応方法と、なぜこの警告が出たのかを調べたのでその内容を記事にしました。\n\n# 警告の内容と対応方法\nこれはコンパイラの警告を日本語訳するとfinal出ないclassは`Sendable`には適合できまへんということなので、素直にclassにfinalをつけるとコンパイラを黙らせることができます。\n(コンパイラは結構ちゃんと教えてくれていました)\n\n修正後のコードは以下のとおりです。\n```swift\nfinal class Counter: Sendable {\n    \n    let value: Int = 0\n}\n```\n\nこれだけでは流石に味気ない記事で終わってしまうので、冒頭でも述べたとおりなぜfinalなclass出ないと`Sendable`に適合できないのか以降で考えてみます。\n\n# なぜclassはfinalでないと`Sendable`に適合できないのか\nこれは`Sendable`の意味とfinalなclassの意味を理解すれば、理由が見えてきます。\n\n### `Sendable`とは\nデータ競合しない型であることを保証するプロトコルです。\nデータ競合しないということは、型がイミュータブル(不変)であるということです。(複数のスレッドで同時に書き込みを含むアクセスがあったときにデータ競合が起きるため、書き込みが起きない型であれば書き込みができないのでデータ競合も起きない)\n\n### finalなclassとは\n継承されないclassのことです。\n\nfinalがついていないclassは別クラスで継承できますが、finalがついたclassを継承しようとするとコンパイルエラーになります。\nつまり継承されないことを保証したclassとなります。\n\n```swift\nfinal class Counter: Sendable {\n    \n    let value: Int = 0\n}\n\nclass inheritableCounter {\n    let value: Int = 0\n}\n\nclass SampleCounter1: inheritableCounter {} // OK\n\nclass SampleCounter2: Counter {} // コンパイルエラー\n```\n\n継承すると、以下`SampleCounter1`のようにプロパティの拡張が行えたり、継承元の型として振る舞うことができます。\n\n```swift\nclass InheritableCounter {\n    let value: Int = 0\n}\n\nclass SampleCounter1: InheritableCounter {\n    var extensionValue: Int = 0\n}\n\nlet counter: InheritableCounter = SampleCounter1()\n```\n\nここまでくると、なぜfinalなclassでないと`Sendable`に適合できないか見えてきました。\n\nfinalでないclassは継承によって ミュータブル(可変)な型になることが可能です。\nそして、継承された型は継承元と同じ型として振る舞うことができる性質上、継承元がイミュータブルでも継承された型がミュータブルとなり継承元の型として振る舞うと継承元の型がイミュータブルであることつまり`Sendable`であることが保証されなくなってしまいます。\nよってclassを`Sendable`に適合するにはfinalで継承されないことを保証してあげる必要があるわけでした。\n(ちなみに、structは継承することができないので、finalをつけないと`Sendable`になれないといった制約はありません)\n\n```swift\nclass InheritableCounter { // 定数しかないので、イミュータブルなクラス\n    let value: Int = 0\n}\n\nclass SampleCounter1: InheritableCounter { // 変数を持ったミュータブルなクラス\n    var extensionValue: Int = 0\n}\n\nlet counter: InheritableCounter = SampleCounter1() // ミュータブルなSampleCounter1がInheritableCounterとして振る舞っている\n```\n\n# おわり\n元々はちょっとした警告の対応でしたが、なぜこれがダメなのかちゃんと考えると理由もちゃんとあって謎解きみたいで楽しかったです。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2024-11-09T00:59:56+09:00",
    "group": null,
    "id": "bb719b19707747b15feb",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 1,
    "tags": [
      {
        "name": "iOS",
        "versions": [
          
        ]
      },
      {
        "name": "Swift",
        "versions": [
          
        ]
      }
    ],
    "title": "classがSendableに適合するためにはfinalなclassである必要がある件",
    "updated_at": "2024-11-09T00:59:56+09:00",
    "url": "https://qiita.com/stotic-dev/items/bb719b19707747b15feb",
    "user": {
      "description": "カメ好き！",
      "facebook_id": "",
      "followees_count": 6,
      "followers_count": 0,
      "github_login_name": "stotic-dev",
      "id": "stotic-dev",
      "items_count": 14,
      "linkedin_id": "",
      "location": "千葉",
      "name": "",
      "organization": "",
      "permanent_id": 3359094,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3359094/profile-images/1727252399",
      "team_only": false,
      "twitter_screen_name": "SE57186932",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null,
    "organization_url_name": null,
    "slide": false
  }
]
